---
- hosts: "{{ tgt_node | default('k3snodes') }}" 
  any_errors_fatal: false 
  tasks:
    - name: Install Docker 
      apt:
        name: docker.io  
        state: present 
        update_cache: true

    - name: Reboot if required
      command: shutdown -r now 'Rebooting...' 
      args:
        removes: /var/reboot-required

    - name: Add the packages.cloud.google.com apt key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    
    - name: Install k8s deb repository
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present

    - name: Install k8s modules
      apt:
        name: "{{ item }}"
        state: present
        update_cache: false 
      loop:
        - kubelet 
        - kubeadm 
        - kubectl

    - name: Disable regular updates of k8s modules
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet 
        - kubeadm 
        - kubectl

    - name: Reboot if required
      command: shutdown -r now 'Rebooting...' 
      args:
        removes: /var/reboot-required
       
    - name: Check if daemon.json already exists
      stat: path=/etc/docker/daemon.json
      register: stat_daemon_json

    - name: Create daemon.json
      copy:
        dest: "/etc/docker/daemon.json"
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
      when: stat_daemon_json.stat.exists == false
    
    - name: Test for line
      shell: "grep -c cgroup /boot/firmware/cmdline.txt"
      register: cgroup_chk
      failed_when: cgroup_chk.rc != 1 and cgroup_chk.rc != 0

    - name: Tack to the end of line  
      shell: sed -i '$ s/$/ cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1/' /boot/firmware/cmdline.txt
      when: cgroup_chk.stdout == "0" 
      args:
        warn: false

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
    
    - name: Reboot if required
      command: shutdown -r now 'Rebooting...' 
      args:
        removes: /var/reboot-required
      when: cgroup_chk.stdout == "0" 
